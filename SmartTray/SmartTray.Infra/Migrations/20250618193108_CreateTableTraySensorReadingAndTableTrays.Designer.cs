// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartTray.Infra.Db;

#nullable disable

namespace SmartTray.Infra.Migrations
{
    [DbContext(typeof(SmartTrayDbContext))]
    [Migration("20250618193108_CreateTableTraySensorReadingAndTableTrays")]
    partial class CreateTableTraySensorReadingAndTableTrays
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SmartTray.Domain.Models.GrowthSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("DailySolarHours")
                        .HasColumnType("float");

                    b.Property<double>("Humidity")
                        .HasColumnType("float");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("TemperatureCelsius")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("SmartTray.Domain.Models.Tray", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CropType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SowingDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Trays");
                });

            modelBuilder.Entity("SmartTray.Domain.Models.TraySensorReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("Humidity")
                        .HasColumnType("float");

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.Property<int>("TrayId")
                        .HasColumnType("int");

                    b.Property<bool>("UvLedsOn")
                        .HasColumnType("bit");

                    b.Property<double>("UvReading")
                        .HasColumnType("float");

                    b.Property<bool>("WaterAdded")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("TrayId");

                    b.ToTable("TraySensorReadings");
                });

            modelBuilder.Entity("SmartTray.Domain.Models.TraySensorReading", b =>
                {
                    b.HasOne("SmartTray.Domain.Models.Tray", "Tray")
                        .WithMany()
                        .HasForeignKey("TrayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tray");
                });
#pragma warning restore 612, 618
        }
    }
}
