// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SmartTray.Infra.Db;

#nullable disable

namespace SmartTray.Infra.Migrations
{
    [DbContext(typeof(SmartTrayDbContext))]
    [Migration("20250703181710_ChangeNameFKTraySettings")]
    partial class ChangeNameFKTraySettings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SmartTray.Domain.Models.Tray", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CropType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("crop_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTime>("SowingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sowing_date");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("tray_settings_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("tray_settings_id")
                        .IsUnique();

                    b.ToTable("tray", (string)null);
                });

            modelBuilder.Entity("SmartTray.Domain.Models.TraySensorReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<bool>("HeatingMatOn")
                        .HasColumnType("boolean")
                        .HasColumnName("heating_mat_on");

                    b.Property<int>("Humidity")
                        .HasColumnType("integer")
                        .HasColumnName("humidity");

                    b.Property<int>("Temperature")
                        .HasColumnType("integer")
                        .HasColumnName("temperature_celsius");

                    b.Property<int>("TrayId")
                        .HasColumnType("integer");

                    b.Property<int>("UV")
                        .HasColumnType("integer")
                        .HasColumnName("uv");

                    b.Property<bool>("UvLedsOn")
                        .HasColumnType("boolean")
                        .HasColumnName("uv_leds_on");

                    b.Property<bool>("WaterAdded")
                        .HasColumnType("boolean")
                        .HasColumnName("water_added");

                    b.HasKey("Id");

                    b.HasIndex("TrayId");

                    b.ToTable("tray_sensor_readings", (string)null);
                });

            modelBuilder.Entity("SmartTray.Domain.Models.TraySettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DailySolarHours")
                        .HasColumnType("integer")
                        .HasColumnName("daily_solar_hours");

                    b.Property<int>("Humidity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("humidity");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("register_date");

                    b.Property<int>("TemperatureCelsius")
                        .HasColumnType("integer")
                        .HasColumnName("temperature_celsius");

                    b.HasKey("Id");

                    b.ToTable("tray_settings", (string)null);
                });

            modelBuilder.Entity("SmartTray.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("post_code");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("salt");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("SmartTray.Domain.Models.Tray", b =>
                {
                    b.HasOne("SmartTray.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartTray.Domain.Models.TraySettings", "Settings")
                        .WithOne("Tray")
                        .HasForeignKey("SmartTray.Domain.Models.Tray", "tray_settings_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Settings");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartTray.Domain.Models.TraySensorReading", b =>
                {
                    b.HasOne("SmartTray.Domain.Models.Tray", "Tray")
                        .WithMany()
                        .HasForeignKey("TrayId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tray");
                });

            modelBuilder.Entity("SmartTray.Domain.Models.TraySettings", b =>
                {
                    b.Navigation("Tray")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
